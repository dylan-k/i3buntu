#!/home/efazati/.todo.actions.d/.google_env/bin/python

# The client_id and client_secret are copied from the API Access tab on
# the Google APIs Console
CLIENT_ID = ""
CLIENT_SECRET = ""

""" TODO.TXT Google Task Sync
USAGE:
    google [pull|push|push all]

SETUP AND CONFIGURATION:
  Enable Google API Access
    - Create a project in the Google APIs Console
    (http://code.google.com/apis/console).
    - Under "APIs" enable the Tasks API
    - Under "Credentials" create a new Client Id for an installed application
    - Enter the Google-provided Client ID and Client Secret in the variables
    at the start of the addon script.

  Install Dependencies

    pip install google-api-python-client

USAGE NOTES:
    Note that for simplicity, the 'archive' command is executed prior to the
    sync.

    The 'pull' command will fetch google tasks and add them to your todo and
    one lists. Tasks will be pulled from all Google Task lists

    The 'push' command will push your todo list from todo.txt to Google Tasks
    The 'push all' command will push items from both todo.txt and done.txt
    Currently all new tasks will be added to the default Google Task list.
    (This may change in the future)

    As this is a pull/push, there are obviously limitations to the syncing.
    For instance an already pushed  todo that is editted considerably will get
    pushed as a separate task as there is no way to match old and new. I've
    tried to allow for some of the more common and minor changes, such as
    marking a todo with a priority. Also, completing a todo or task can be
    synced up or down accordingly.
"""


import os
import sys
import httplib2
import re
import codecs
import time
from datetime import datetime, timedelta

from apiclient.discovery import build
from oauth2client.file import Storage
from oauth2client.client import OAuth2WebServerFlow
from oauth2client.tools import run
from subprocess import call

__version__ = "0.1"
__date__ = "2011/06/06"
__updated__ = "2012/01/18"
__author__ = "Andrew McIntosh (github.com/amcintosh)"
__copyright__ = "Copyright 2012, Andrew McIntosh"
__license__ = "GPL"

# Set up a Flow object for authentication. Uses OAuth 2.0
FLOW = OAuth2WebServerFlow(
    client_id=CLIENT_ID,
    client_secret=CLIENT_SECRET,
    scope='https://www.googleapis.com/auth/tasks',
    user_agent='todo.txt/1.0')


def usage():
    """Prints progam usage"""
    print "USAGE: %s [task]" % (sys.argv[1], )


def getAPIService():
    """Authorize and return a session for the Tasks API"""
    # Check is credentials are stored and valid. Otherwise get credentials
    storage = Storage(".tasks.dat")
    credentials = storage.get()
    if credentials is None or credentials.invalid:
        credentials = run(FLOW, storage)

    http = httplib2.Http()
    http = credentials.authorize(http)

    # Build a service object for interacting with the API.
    service = build(serviceName="tasks", version="v1", http=http)
    return service


def task(service, date, todo):
    task = {
        "title": todo,
        "due": date.strftime("%Y-%m-%d")+"T00:00:00Z", # ,
        "status": "needsAction"
    }
    service.tasks().insert(tasklist='@default', body=task).execute()

def add_today(todo):
    service = getAPIService()
    task(service, datetime.today(), todo)

def add_weekly(todo, day, count=10):
    day = int(day)
    service = getAPIService()
    date = datetime.today()
    date = date.replace(day=day)
    task(service, date, todo)

    for i in range(count):
        date = date + timedelta(days=7)
        task(service, date, todo)

def add_daily(todos, day):
    day = int(day)
    service = getAPIService()
    todos = todos.split(",")
    date = datetime.today()
    date = date.replace(day=day)
    for todo in todos:
        task(service, date, todo)
        date = date + timedelta(days=1)

def add_monthly(todo, day, count=10):
    day = int(day)
    service = getAPIService()
    date = datetime.today()
    date = date.replace(day=day)
    task(service, date, todo)

    for i in range(count):
        date = date + timedelta(days=30)
        task(service, date, todo)


def main(argv):
    if len(argv) < 2 or argv[0] == "usage":
        usage()
        sys.exit(2)

    if argv[0] == "day" :
        add_today(argv[1])
        print "Task Added"

    if argv[0] == "week" :
        args = argv[1].split("_")
        add_weekly(args[0], args[1])
        print "Tasks Added"

    if argv[0] == "month" :
        args = argv[1].split("_")
        add_weekly(args[0], args[1])
        print "Tasks Added"

    if argv[0] == "list" :
        args = argv[1].split("_")
        add_daily(args[0], args[1])
        print "Tasks Added"

    else:
        usage()


if __name__ == "__main__":
    main(sys.argv[1:])

